from mfrc522 import MFRC522
import utime
from machine import Pin

# Configuration for the MFRC522 RFID reader
reader = MFRC522(spi_id=0, sck=6, miso=4, mosi=7, cs=5, rst=22)

# Pin Configuration
button1 = Pin(14, Pin.IN, Pin.PULL_UP)
button2 = Pin(15, Pin.IN, Pin.PULL_UP)
button3 = Pin(16, Pin.IN, Pin.PULL_UP)
red = Pin(0, Pin.OUT)
green = Pin(1, Pin.OUT)
blue = Pin(2, Pin.OUT)

saved_data = None  # Variable to store the saved data from the first card


def flash_led(led, duration):
    led.on()
    utime.sleep_ms(duration)
    led.off()


def reset_system():
    global saved_data
    saved_data = None
    print("System reset. Ready for new operation.")
    for _ in range(3):  # Blink blue LED thrice
        flash_led(blue, 500)
        utime.sleep_ms(500)  # Wait for 0.5 seconds between blinks
    green.on()  # Turn on green LED indicating system is ready


def handle_button_press(uid):
    global saved_data

    if not button1.value():  # Button 1 is pressed
        saved_data = read_block(uid, 0)
        flash_led(blue if saved_data else red, 300)  # Flash blue if successful, else red
        utime.sleep_ms(300)  # Debouncing

    elif not button2.value():  # Button 2 is pressed
        if saved_data:
            write_status = write_block(uid, 5, saved_data)
            name_hex = stringToHex("Glen")
            if write_status and write_block(uid, 6, name_hex):
                flash_led(blue, 1000)
            else:
                flash_led(red, 1000)
                print("Failed to write to second card.")
        else:
            flash_led(red, 1000)  # Flash red LED for 1 second
            print("No data saved from the first card.")
        utime.sleep_ms(300)  # Debouncing


def read_block(uid, block):
    default_key = [255, 255, 255, 255, 255, 255]
    status = reader.auth(reader.AUTHENT1A, block, default_key, uid)
    if status == reader.OK:
        status, data = reader.read(block)
        if status == reader.OK:
            return data
    return None


def write_block(uid, block, data):
    default_key = [255, 255, 255, 255, 255, 255]
    status = reader.auth(reader.AUTHENT1A, block, default_key, uid)
    if status == reader.OK:
        status = reader.write(block, data)
        return status == reader.OK
    return False


def stringToHex(string, block_size=16):
    hex_list = [ord(c) for c in string]
    # If the list is shorter than block_size, pad with zeros
    while len(hex_list) < block_size:
        hex_list.append(0x00)
    # If the list is longer than block_size, truncate it
    return hex_list[:block_size]


# Main loop
try:
    green.on()  # Turn on green LED indicating the system is ready

    while True:
        reader.init()
        (stat, tag_type) = reader.request(reader.REQIDL)

        if not button3.value():  # Check for the reset button
            reset_system()
            utime.sleep_ms(300)  # Debouncing
            continue

        if stat == reader.OK:
            (stat, uid) = reader.SelectTagSN()
            if stat == reader.OK:
                handle_button_press(uid)
        else:
            utime.sleep_ms(500)  # Wait for a half-second before checking again

except KeyboardInterrupt:
    pass



